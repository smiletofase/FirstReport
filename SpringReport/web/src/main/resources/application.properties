spring.application.name = SpringReport
spring.profiles.active = @profiles.active@
server.servlet.session.timeout = 86400
server.tomcat.uri-encoding=UTF-8
server.max-http-post-size=104857600
server.compression.enabled=true
server.compression.mime-types=application/javascript,text/css,application/json,application/xml,text/html,text/xml,text/plain
server.compression.min-response-size=2048

spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB
spring.http.encoding.charset=UTF-8
spring.http.encoding.force=true
spring.http.encoding.enabled=true
management.endpoints.web.exposure.include=*
management.metrics.tags.application=${spring.application.name}

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.driver-class-name=dm.jdbc.driver.DmDriver
#spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
#spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
#spring.datasource.driver-class-name=com.kingbase8.Driver
#spring.datasource.driver-class-name=com.highgo.jdbc.Driver

spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# druid参数调优（可选）
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
#  配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
# 测试连接
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters
spring.datasource.filters=stat
# asyncInit是1.1.4中新增加的配置，如果有initialSize数量较多时，打开会加快应用启动时间
spring.datasource.asyncInit=true
# mybatis-plus
mybatis-plus.type-aliases-package=com.springreport.entity
mybatis-plus.config-locations=classpath:mybatis/mybatis-config.xml
mybatis-plus.mapper-locations=classpath:mybatis/mapper/**/*.xml,classpath:extmapper/mapper/**/*.xml,classpath:slidemapper/mapper/**/*.xml,classpath:onlyofficemapper/mapper/**/*.xml
mybatis-plus.global-config.field-strategy=1
mybatis-plus.type-handlers-package=com.springreport.mybatishandler
mybatis-plus.configuration.jdbc-type-for-null=null
##pageHelper分页插件
pagehelper.helper-dialect=MYSQL
#pagehelper.helper-dialect=postgresql
#pagehelper.helper-dialect=oracle
#pagehelper.helper-dialect=sqlserver
pagehelper.reasonable=true
pagehelper.support-methods-arguments=true
pagehelper.params=count=countSql

# 邮箱配置
spring.mail.host=smtp.163.com
# 你的163邮箱
spring.mail.username=
# 注意这里不是邮箱密码，而是SMTP授权密码
spring.mail.password=
spring.mail.port=465
spring.mail.protocol=smtps
spring.mail.default-encoding=UTF-8
spring.mail.from=

luckysheet.redis.channel=luckysheet.channel

org.quartz.jobStore.useProperties=true

#在集群中每个实例都必须有一个唯一的instanceId，但是应该有一个相同的instanceName【默认“QuartzScheduler”】【非必须】
org.quartz.scheduler.instanceName=quartzScheduler
#Scheduler实例ID，全局唯一
org.quartz.scheduler.instanceId=AUTO
# 指定scheduler的主线程是否为后台线程，【默认false】【非必须】
org.quartz.scheduler.makeSchedulerThreadDaemon=true
# 触发job时是否需要拥有锁
org.quartz.jobStore.acquireTriggersWithinLock = true

#线程池配置
#线程池类型
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
#线程池大小
org.quartz.threadPool.threadCount=10
#线程优先级
org.quartz.threadPool.threadPriority=5

#============================================================================
# Configure JobStore
#============================================================================
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.tablePrefix=QRTZ_
# 最大能忍受的触发超时时间(触发器被认定为“misfired”之前)，如果超过则认为“失误”【默认60秒】
org.quartz.jobStore.misfireThreshold = 60000
# 配置数据源的名称，在后面配置数据源的时候要用到，
# 例如org.quartz.dataSource.myDS.driver
org.quartz.jobStore.dataSource = myDS

# 集群配置
org.quartz.jobStore.isClustered = true
# 检入到数据库中的频率(毫秒)。检查是否其他的实例到了应当检入的时候未检入这能指出一个失败的实例，
# 且当前Scheduler会以此来接管执行失败并可恢复的Job通过检入操作，Scheduler也会更新自身的状态记录
org.quartz.jobStore.clusterCheckinInterval=5000
# jobStore处理未按时触发的Job的数量
org.quartz.jobStore.maxMisfiresToHandleAtATime=20

#多租户模式
merchantmode=1

# 不需要自动装配的类配置
spring.autoconfigure.exclude=org.apache.rocketmq.spring.autoconfigure.RocketMQAutoConfiguration